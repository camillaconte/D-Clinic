# In questo file possiamo inserire tutte le configurazioni desiderate per Spring
# In pratica stiamo assegnando dei valori a delle variabili, che Spring sa di dover leggere

# Qui configuriamo i dati di connessione per il database: URL, username e password
spring.datasource.url=jdbc:mysql://localhost:3306/clinicdb
spring.datasource.username=root
spring.datasource.password=password

# Qui aggiungiamo alcune richieste specifiche:

# Politica di interazione con il database.
# "update" significa: se ci sono delle differenza nello schema, aggiornalo
# alternative sono "create" (crea lo schema la prima volta e poi lo vuole sempre inalterato), "create-drop" (ogni volta
# cancella tutto e ricrea) oppure "validate" che si limita a verificarne la correttezza
spring.jpa.hibernate.ddl-auto=update

# Qui specifichiamo il nome del driver
spring.datasource.driver-class-firstName =com.mysql.cj.jdbc.Driver

springdoc.swagger-ui.disable-swagger-default-url=true
springdoc.swagger-ui.path=/myproject

# Qui settiamo il logger
# questo serve per visualizzare la consolle meglio, con i COLORI
spring.output.ansi.enabled=ALWAYS

#attivo il livello INFO su tutta l'applicazione
logging.level.root=INFO

#però specifico che un certo pacchetto deve avere un livello diverso
#avrebbe più senso mettere magari DEBUG nel pacchetto su cui sto lavorando
logging.level.develhope.log.controllers=INFO
logging.level.develhope.log.services=INFO

# qui setto il logging file, dove voglio registrare i logs
# By default, Spring Boot will only log to the console and will not write log files.
# If you want to write log files in addition to the console output
# you need to set a logging.file or logging.path property (for example in your application.properties).
logging.file.firstName=./log/DClinicLog.log

fileRepositoryFolderProfilePictures = ProfilePicturesRepository

spring.jackson.serialization.fail-on-empty-beans=false